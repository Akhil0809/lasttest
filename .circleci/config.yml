version: '2.1'
orbs: 

jobs:
  build_and_push_image_to_ecr:
  #ussing docker as executor
     docker:
       - image: cimg/python:3.10.5
     steps:
       - setup_remote_docker  #setting up a remote docker on which we can run our commands
       - checkout #checkout git repo
       - run: pip install awscli
       - run: 
            name: configure aws
            command: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_DEFAULT_REGION 
       - run:
            name: build and push images 
            command: |  
              echo $CIRCLE_BRANCH
              docker login -u AWS -p $(aws ecr get-login-password --region $AWS_DEFAULT_REGION ) ${ECR_REPO_URL}/${REPO_NAME}
              docker build -t ${REPO_NAME} .
              docker tag ${REPO_NAME}:latest ${ECR_REPO_URL}/${REPO_NAME}:latest
              docker push ${ECR_REPO_URL}/${REPO_NAME}:latest
  establish_ssh_connection_and_pull_image:
     #here we are using aws linux server over which we can run our docker conatiners for deployment 
     docker:
        - image: cimg/python:3.10.5
     steps:
        - checkout 
        - run: pip install awscli
        - run: 
            name: configure aws
            command: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_DEFAULT_REGION 
        - run:
            name: pull image     
            command: |
              PUBLIC_IP=$(curl ipinfo.io/ip)
              echo PUBLIC_IP
              SG_ID=sg-0cff49db409410165
              aws ec2 authorize-security-group-ingress --region $AWS_DEFAULT_REGION --group-id $SG_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32 || true
              scp -o StrictHostKeyChecking=no .env $SSH_USER@$SSH_HOST:/tmp
              scp -o StrictHostKeyChecking=no first.sh $SSH_USER@$SSH_HOST:/tmp 
              ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd /tmp; chmod +x first.sh; sudo ./first.sh"
workflows:  
   for-tailcutter:
      jobs:
        - build_and_push_image_to_ecr:
            context: aws-credentials
            filters:
              branches:
                only:
                 - develop/mahle
        - establish_ssh_connection_and_pull_image:
            requires:
              - build_and_push_image_to_ecr
            context: 
              - ssh_coonection
              - aws-credentials
            filters:
              branches:
                only:
                 - develop/mahle

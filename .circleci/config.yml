version: '2.1'


jobs:
  build:
    docker:
      - image: cimg/python:3.10.2
      - image: 'docker:17.09.1-ce-git'
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Success
          when: on_success
          command: >
            pip install awscli
            sudo aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_DEFAULT_REGION

            sudo apt-get update          

            sudo apt install python3-pip

            sudo aws --version

            docker login -u AWS -p $(aws ecr get-login-password --region ap-south-1) ${ECR_REPO_URL}/${REPO_NAME}


            docker build -t ${REPO_NAME} .

            docker tag ${REPO_NAME}:latest ${ECR_REPO_URL}/${REPO_NAME}:latest

            docker push ${ECR_REPO_URL}/${REPO_NAME}:latest
  
  deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout

      - run:
          name: Deploy
          when: on_success
          command:  |
            sudo apt-get update
            sudo apt-get install -y awscli 
            
            sudo apt install python3-pip
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_DEFAULT_REGION         
            
            sudo aws --version          
      
            PUBLIC_IP=$(curl ipinfo.io/ip)

            echo PUBLIC_IP
            
            # 3- Get AWS Region
            AWS_REGION=ap-south-1

            # 4- Get SG ID
            SG_ID=sgr-0bf783bd14d85a525
            
            # 5- Add an ingress rule to the security group
            aws ec2 authorize-security-group-ingress --region ap-south-1 --group-id $SG_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32 || true
            
            # 6- Give the ingress rule some time to propogate
            # sleep 5

            # 7- SSH to the server to deploy
            # TODO Change to your username
            # EC2_USERNAME=${EC2_USERAME}
            # # TODO Change to your server's URL or public IP
            # EC2_PUBLIC_DNS=${EC2_PUBLIC_DNS}

            # echo $EC2_USERNAME
            # echo $EC2_PUBLIC_DNS
            
            # echo $ENV_FILE | base64 --decode > .env
            # echo $PEM_FILE | base64 --decode > server.pem

            # chmod 400 server.pem

            # chmod +x .circleci/deploy.sh
            
            # scp -o StrictHostKeyChecking=no -i server.pem -v -r ./docker-compose-prod.yml ubuntu@172.23.149.30:/home/ubuntu/cd
            # scp -o StrictHostKeyChecking=no -i server.pem -v -r ./entrypoint.sh ubuntu@172.23.149.30:/home/ubuntu/cd
            # scp -o StrictHostKeyChecking=no -i server.pem -v -r .env ubuntu@172.23.149.30:/home/ubuntu/cd
            # scp -o StrictHostKeyChecking=no -i server.pem -v -r ./medtech_api_deploy.sh ubuntu@172.23.149.30:/home/ubuntu/cd
            # scp -o StrictHostKeyChecking=no -i server.pem -v -r ../nginx/Dockerfile ubuntu@172.23.149.30:/home/ubuntu/cd
            # scp -o StrictHostKeyChecking=no -i server.pem -v -r ../nginx/nginx.conf ubuntu@172.23.149.30:/home/ubuntu/cd
              aws ec2 authorize-security-group-ingress --region $AWS_DEFAULT_REGION --group-id $SG_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32
            
              scp .env $SSH_USER@$SSH_HOST:/tmp
              scp first.sh $SSH_USER@$SSH_HOST:/tmp 
              ssh $SSH_USER@$SSH_HOST "cd /tmp; chmod +x first.sh; sudo ./first.sh"
              aws ec2 revoke-security-group-ingress --region ap-southeast-1 --group-id $SG_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32
            # bash /home/ubuntu/cd/medtech_api_deploy.sh

            #aws ec2 revoke-security-group-ingress --region ap-southeast-1 --group-id $SG_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32

            
             
            
workflows:  
   for-tailcutter:
      jobs:
        - build:
            context: aws-credentials
            filters:
              branches:
                only:
                 - develop/mahle
        - hold:
            type: approval
            requires:
              - build
        - deploy:
            requires:
              - hold
            context: 
              - ssh_coonection
              - aws-credentials
            filters:
              branches:
                only:
                 - develop/mahle
